// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Resturant_RES_MVC_ITI_PRJ.Models;

#nullable disable

namespace Resturant_RES_MVC_ITI_PRJ.Migrations
{
    [DbContext(typeof(ResturantDbContext))]
    partial class ResturantDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Customers", b =>
                {
                    b.Property<int>("CustID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustID"));

                    b.Property<string>("CustEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustPhone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("CustID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.CustomersAddersses", b =>
                {
                    b.Property<int>("CustomersAdderssesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomersAdderssesID"));

                    b.Property<int>("CustAddressApartment")
                        .HasColumnType("int");

                    b.Property<string>("CustAddressBuildingNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustAddressCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustAddressCounty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustAddressFloor")
                        .HasColumnType("int");

                    b.Property<string>("CustAddressStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.HasKey("CustomersAdderssesID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomersAddersses");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Dish", b =>
                {
                    b.Property<int>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DishId"));

                    b.Property<int>("DishCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("DishImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DishPrice")
                        .HasColumnType("float");

                    b.HasKey("DishId");

                    b.HasIndex("DishCategoryId");

                    b.ToTable("Dish");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.DishesCategories", b =>
                {
                    b.Property<int>("DishesCategoriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DishesCategoriesId"));

                    b.Property<string>("DishesCategoriesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DishesCategoriesId");

                    b.ToTable("DishesCategories");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.DishesIngredientsRel", b =>
                {
                    b.Property<int>("DishesIngredientsRelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DishesIngredientsRelId"));

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("IngerdientId")
                        .HasColumnType("int");

                    b.HasKey("DishesIngredientsRelId");

                    b.HasIndex("DishId");

                    b.HasIndex("IngerdientId");

                    b.ToTable("DishesIngredientsRel");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Ingerdients", b =>
                {
                    b.Property<int>("IngerdientsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngerdientsId"));

                    b.Property<string>("IngName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngerdientsId");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("OrderState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FranchiseId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.OrderDishesRel", b =>
                {
                    b.Property<int>("OrderDishesRelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDishesRelId"));

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDishesRelId");

                    b.HasIndex("DishId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDishesRel");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.OrderTypes", b =>
                {
                    b.Property<int>("OrderTypesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderTypesId"));

                    b.Property<string>("OrderTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OrderTypesId");

                    b.ToTable("OrderTypes");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Reservations", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomersAdderssesID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReservarionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TableID")
                        .HasColumnType("int");

                    b.HasKey("ReservationID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("CustomersAdderssesID");

                    b.HasIndex("TableID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Tables", b =>
                {
                    b.Property<int>("TablesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TablesID"));

                    b.Property<int>("ChairsNumbers")
                        .HasColumnType("int");

                    b.Property<string>("TableNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TablesID");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Testimonials", b =>
                {
                    b.Property<int>("TestimonialsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestimonialsID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("TestimonialsText")
                        .HasColumnType("int");

                    b.HasKey("TestimonialsID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Testimonials");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Management.Models.Employee", b =>
                {
                    b.Property<int>("EmpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpID"));

                    b.Property<int>("EmpCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("EmpEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EmpHiringDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmpName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmpNationalId")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("EmpPhone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<double>("EmpSalary")
                        .HasColumnType("float");

                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.HasKey("EmpID");

                    b.HasIndex("EmpCategoryId");

                    b.HasIndex("FranchiseId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Management.Models.EmployeeAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmpId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("EmpId");

                    b.ToTable("EmployeeAddress");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Management.Models.EmployeesCategories", b =>
                {
                    b.Property<int>("EmployeesCategoriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeesCategoriesId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeesCategoriesId");

                    b.ToTable("EmployeesCategories");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Management.Models.Franchise", b =>
                {
                    b.Property<int>("FranchiseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FranchiseId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FranchiseId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Franchise");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.CustomersAddersses", b =>
                {
                    b.HasOne("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Customers", "Customers")
                        .WithMany("CustomersAddersses")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Dish", b =>
                {
                    b.HasOne("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.DishesCategories", "DishesCategories")
                        .WithMany("Dishes")
                        .HasForeignKey("DishCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DishesCategories");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.DishesIngredientsRel", b =>
                {
                    b.HasOne("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Dish", "Dishes")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Ingerdients", "Ingredtients")
                        .WithMany("DishesIngredientsRel")
                        .HasForeignKey("IngerdientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dishes");

                    b.Navigation("Ingredtients");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Order", b =>
                {
                    b.HasOne("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Customers", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resturant_RES_MVC_ITI_PRJ.Areas.Management.Models.Franchise", "Franchise")
                        .WithMany()
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.OrderTypes", "OrderType")
                        .WithMany("Orders")
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Franchise");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.OrderDishesRel", b =>
                {
                    b.HasOne("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Order", "Order")
                        .WithMany("OrderDishesRels")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Reservations", b =>
                {
                    b.HasOne("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Customers", "Customers")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.CustomersAddersses", null)
                        .WithMany("Reservations")
                        .HasForeignKey("CustomersAdderssesID");

                    b.HasOne("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Tables", "Tables")
                        .WithMany("Reservations")
                        .HasForeignKey("TableID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Testimonials", b =>
                {
                    b.HasOne("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Customers", "Customers")
                        .WithMany("Testimonials")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Management.Models.Employee", b =>
                {
                    b.HasOne("Resturant_RES_MVC_ITI_PRJ.Areas.Management.Models.EmployeesCategories", "EmployeesCategories")
                        .WithMany("Employees")
                        .HasForeignKey("EmpCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resturant_RES_MVC_ITI_PRJ.Areas.Management.Models.Franchise", "Franchise")
                        .WithMany("Employees")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeesCategories");

                    b.Navigation("Franchise");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Management.Models.EmployeeAddress", b =>
                {
                    b.HasOne("Resturant_RES_MVC_ITI_PRJ.Areas.Management.Models.Employee", "Employee")
                        .WithMany("EmployeeAddress")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Management.Models.Franchise", b =>
                {
                    b.HasOne("Resturant_RES_MVC_ITI_PRJ.Areas.Management.Models.Employee", "Manager")
                        .WithMany("Franchises")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Customers", b =>
                {
                    b.Navigation("CustomersAddersses");

                    b.Navigation("Testimonials");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.CustomersAddersses", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.DishesCategories", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Ingerdients", b =>
                {
                    b.Navigation("DishesIngredientsRel");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Order", b =>
                {
                    b.Navigation("OrderDishesRels");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.OrderTypes", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Client.Models.Tables", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Management.Models.Employee", b =>
                {
                    b.Navigation("EmployeeAddress");

                    b.Navigation("Franchises");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Management.Models.EmployeesCategories", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Resturant_RES_MVC_ITI_PRJ.Areas.Management.Models.Franchise", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
